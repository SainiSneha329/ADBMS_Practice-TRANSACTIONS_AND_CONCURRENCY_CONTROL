-- Part A: Insert Multiple Fee Payments in a Transaction
DROP TABLE IF EXISTS FeePayments;
CREATE TABLE FeePayments(
    payment_id INT PRIMARY KEY,
    student_name VARCHAR(50) NOT NULL,
    amount DECIMAL(10,2) CHECK (amount > 0),
    payment_date DATE
);

START TRANSACTION;
INSERT INTO FeePayments (payment_id, student_name, amount, payment_date) VALUES
    (1,'Ashish',5000.00,'2024-06-01'),
    (2,'Smaran',4500.00,'2024-06-02'),
    (3,'Vaibhav',5500.00,'2024-06-03');
COMMIT;

SELECT * FROM FeePayments;

-- Part B: Demonstrate ROLLBACK for Failed Payment Insertion
-- START TRANSACTION;
-- INSERT INTO FeePayments (payment_id, student_name, amount, payment_date)
-- VALUES (4, 'Kiran', 3000.00, '2024-06-05');
-- INSERT INTO FeePayments (payment_id, student_name, amount, payment_date)
-- VALUES (1, 'Ashish', -2000.00, '2024-06-05'); -- duplicate + invalid amount
-- ROLLBACK;

SELECT * FROM FeePayments;

-- Part C: Simulate Partial Failure and Ensure Consistent State
START TRANSACTION;
-- INSERT INTO FeePayments (payment_id, student_name, amount, payment_date)
-- VALUES (5, 'Rohit', 4000.00, '2024-06-06');
-- INSERT INTO FeePayments (payment_id, student_name, amount, payment_date)
-- -- VALUES (6, NULL, 4200.00, '2024-06-06'); -- NULL student_name causes failure
-- -- ROLLBACK;

SELECT * FROM FeePayments;

-- Part D: Verify ACID Compliance with Transaction Flow
START TRANSACTION;
INSERT INTO FeePayments (payment_id, student_name, amount, payment_date)
VALUES (7, 'Sneha', 4700.00, '2024-06-08'),
       (8, 'Arjun', 4900.00, '2024-06-09');
COMMIT;

SELECT * FROM FeePayments;
